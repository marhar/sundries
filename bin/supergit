#!/bin/sh

# add this somewhere to get short list of attention seekers
# supergit attention -q|grep -v up.to.date|awk '{print $1}'|sort -u

TOP=$HOME/g
GITNAME=marhar

bash_command_completion='
_supergit () {
    local cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $(compgen -W "$(supergit commands)" -- $cur) )
}
complete -F _supergit supergit
'

help="
supergit runs across multiple git depots.
configure the TOP variable to be the directory where you check out repos.
Your config:
    TOP=$TOP
    GITNAME=$GITNAME

commands:
    help    -- print this message
    attention [-q] -- what needs your attention?
    needspush -- what repos need a push?
    notmine -- show which repos aren't cloned from your own github repos

    list    -- list repos under \$TOP
    sow     -- state of the world

any other command is invoked in every git repo.  It's useful for things
like this:
    supergit push
    supergit status -s

or things like this, if you want to set parameters in each repo and
not in your global git config:
    supergit config --global color.ui false
"

# push -n
# GIT_ASKPASS=true supergit push -n

#-----------------------------------------------------------------------
if test $# -eq 0; then
    cat <<.
$help
.

#-----------------------------------------------------------------------
elif test $1. = help.; then
    cat <<.
$help
.

#-----------------------------------------------------------------------
elif test $1. = commands.; then
    echo help attention needspush notmine list sow commands

#-----------------------------------------------------------------------
elif test $1. = notmine.; then
    # which repos don't have a base that belongs to me
    supergit config --list|grep remote.origin.url|grep -v github.com:$GITNAME

#-----------------------------------------------------------------------
elif test $1. = list.; then
    cd $TOP
    for i in *;do
        if test -f $i/.git/config; then
            echo $i
        else
            echo $i NOT A GIT REPO
        fi
    done

#-----------------------------------------------------------------------
elif test $1. = sow.; then
    echo TODO: SOW

#-----------------------------------------------------------------------
elif test $1. = attention.; then
    # attention -q for quieter mode
    if test $2. = -q.; then
        (supergit status -s;supergit needspush)|sort|grep -v ==========
    else
        (supergit status -s;supergit needspush)|sort
    fi

#-----------------------------------------------------------------------
elif test $1. = needspush.; then
    supergit status|grep 'Your branch'|grep -v up-to-date

#-----------------------------------------------------------------------
else
# run over all git repos
WID=`(cd $TOP;for i in *; do echo $i|wc -c; done)|sort -n|tail -1|sed 's/ //g'`

for i in $TOP/*; do

    B=`basename $i`
    B2=`printf "%-${WID}s" $B`
    echo ===================================================== | sed "s/^/$B2/"
    cd $i || exit 1
    git "$@" 2>&1 | sed "s/^/$B2/"
done
fi
