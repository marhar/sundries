#!/bin/sh
# restart using wish \
  exec tclsh8.3 $0 ${1+"$@"}

# this version modified by Mark Harrison, mh@pixar.com
# to run without a GUI.
#
# sockspy: copyright tom poindexter 1998
#           tpoindex@nyx.net
# version 1.0 - december 10, 1998
#           
# spy on conversation between a tcp client and server
#
# usage: sockspy clientPort serverHost serverPort
#        
#                 clientPort - port to which clients connect
#                 serverHost - machine where real server runs
#                 serverPort - port on which real server listens
#
#  e.g. to snoop on http connections to a web server:
#       sockspy 8080 webhost  80
#  then client web browser should use a url like:
#        http://localhost:8080/index.html
#        (or set your browser's proxy to use 8080 on the sockspy machine)

proc printable {s} {
  set n ""
  foreach c [split $s {}] {
    if {"$c" < "\x20" || "$c" > "\x7e"} {
      append n " "
    } else {
      append n $c
    }
  }
  return $n
}

proc handle {targ other data} {
  global ascii
  if {$ascii} {
    foreach line [split $data \n] {
      while {[string length $line]} {
	set line2 [string range $line 0 65]
	set line  [string range $line [string length $line2] end]
	if {"$line" != ""} {
	  set cont +
	} else {
	  set cont " "
	}
	puts [format "$targ %-66.66s %s" [printable $line2] $cont]
      }
    }
  } else {
    while {[string length $data]} {
      set line [string range $data 0 15]
      set data [string range $data [string length $line] end]
      binary scan $line H* hexout
      regsub -all {([0-9a-f][0-9a-f])} $hexout {\1 } hexout
      puts [format "$targ %-48.48s  %-16.16s" $hexout [printable $line]]
    }
  }
}

proc readable {fromSock toSock fromWin toWin} {
  if {[catch {read $fromSock} data]} {
    puts catch,data=$data
    set data ""
  }
  if {[string length $data] == 0} {
    close $fromSock
    close $toSock
    puts " $fromWin ----- closed connection -----"
    puts "$toWin"
  }
  handle $fromWin $toWin $data
  catch {puts -nonewline $toSock $data}
}

proc connect {servHost servPort sockClnt ip port} {
  if {[catch {set sockServ [socket $servHost $servPort]} reason]} {
        puts "ERROR $reason"
    exit
  }
  fconfigure $sockClnt -blocking 0 -buffering none -translation binary
  fconfigure $sockServ -blocking 0 -buffering none -translation binary
  #fileevent $sockClnt readable "readable $sockClnt $sockServ --> <--"
  #fileevent $sockServ readable "readable $sockServ $sockClnt <-- -->"
  fileevent $sockClnt readable "readable $sockClnt $sockServ --> {   }"
  fileevent $sockServ readable "readable $sockServ $sockClnt {   } -->"
}


# get args and start it up

if {$argc < 3} {
  puts "usage: $argv0 localPort serverHost serverPort"
  exit
}
set clntPort [lindex $argv 0]
set servHost [lindex $argv 1]
set servPort [lindex $argv 2]

set client "client: $clntPort"
set server "server: $servHost $servPort" 
set ascii 1
set auto  1

socket -server [list connect $servHost $servPort] $clntPort
vwait forever
 
# that's all!

